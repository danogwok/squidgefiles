# ===================== EDITOR =====================
Pry.config.editor = "vim"

# ===================== CONFIG =====================
Pry.config.color = true
Pry.config.theme = "tomorrow"

# ===================== DEBUGGER ===================
Pry.commands.alias_command 'c', 'continue' rescue nil
Pry.commands.alias_command 's', 'step' rescue nil
Pry.commands.alias_command 'n', 'next' rescue nil

# ===================== CUSTOM PROMPT ==============
# wrap ANSI codes so Readline knows where the prompt ends
def colour(name, text)
  if Pry.color
    "\001#{Pry::Helpers::Text.send name, '{text}'}\002".sub '{text}', "\002#{text}\001"
  else
    text
  end
end

Pry.config.prompt = [
  proc do |object, nest_level, pry|
    prompt  = colour :bright_black, Pry.view_clip(object)
    prompt += ":#{nest_level}" if nest_level > 0
    prompt += colour :cyan, ' » '
  end, proc { |object, nest_level, pry| colour :cyan, '» ' }
]

# ===================== ALIASES ====================
Pry.commands.alias_command "??", "whereami"

# ===================== CUSTOM COMMANDS ============
# from: https://gist.github.com/1297510
default_command_set = Pry::CommandSet.new do
  command "copy", "Copy argument to the clip-board" do |str|
     IO.popen('pbcopy', 'w') { |f| f << str.to_s }
  end

  command "clear" do
    system 'clear'
    if ENV['RAILS_ENV']
      output.puts "Rails Environment: " + ENV['RAILS_ENV']
    end
  end

  command "sql", "Send sql over AR." do |query|
    if ENV['RAILS_ENV'] || defined?(Rails)
      pp ActiveRecord::Base.connection.select_all(query)
    else
      pp "No rails env defined"
    end
  end

  command "caller_method" do |depth|
    depth = depth.to_i || 1
    if /^(.+?):(\d+)(?::in `(.*)')?/ =~ caller(depth+1).first
      file   = Regexp.last_match[1]
      line   = Regexp.last_match[2].to_i
      method = Regexp.last_match[3]
      output.puts [file, line, method]
    end
  end
end

Pry.config.commands.import default_command_set

# ===================== PLUGINS ====================
begin
  require "ap"
  Pry.config.print = proc { |output, value| output.puts value.ai }
rescue LoadError => err
  puts "no awesome_print"
end
